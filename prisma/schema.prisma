datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id              String  @id @db.Uuid
  email           String  @unique
  username        String  @unique
  name            String?
  email_confirmed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password         Password?
  sessions         Session[]
  mastodonAccounts MastodonAccount[]
  blueskyAccounts  BlueskyAccount[]
  linkPosts        LinkPost[]
  emailToken       EmailToken?
  mutePhrases      MutePhrase[]
}

model EmailToken {
  token String

  createdAt DateTime @default(now())

  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.Uuid
}

model Session {
  id             String   @id @db.Uuid
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.Uuid

  // non-unique foreign key
  @@index([userId])
}

model AtprotoAuthSession {
  key     String @id
  session String
}

model AtprotoAuthState {
  key   String @id
  state String
}

model MastodonAccount {
  id               String   @id @db.Uuid
  instance         String
  accessToken      String
  tokenType        String
  expiresIn        Int?
  refreshToken     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  mostRecentPostId String?

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}

model BlueskyAccount {
  id                 String    @id @db.Uuid
  service            String
  refreshJwt         String?
  accessJwt          String
  handle             String    @unique
  did                String    @unique
  mostRecentPostDate DateTime?

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}

model LinkPost {
  id String @id @db.Uuid

  linkUrl String
  link    Link   @relation(fields: [linkUrl], references: [url])
  postId  String @db.Uuid
  post    Post   @relation(fields: [postId], references: [id])
  users   User[]

  @@unique([linkUrl, postId])
}

model Link {
  id          String     @id @db.Uuid
  url         String     @unique
  title       String
  description String?
  imageUrl    String?
  linkPosts   LinkPost[]
}

model Post {
  id        String   @id @db.Uuid
  url       String
  text      String
  postDate  DateTime
  postType  PostType
  quotingId String?  @db.Uuid
  quoting   Post?    @relation("quotes", fields: [quotingId], references: [id])
  quotes    Post[]   @relation("quotes")

  actorHandle  String
  actor        Actor   @relation("author", fields: [actorHandle], references: [handle], onDelete: Cascade)
  repostHandle String?
  reposter     Actor?  @relation("reposter", fields: [repostHandle], references: [handle], onDelete: Cascade)

  linkPosts LinkPost[]
  images    PostImage[]
}

model PostImage {
  id     String @id @db.Uuid
  alt    String
  url    String
  postId String @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Actor {
  id        String  @id @db.Uuid
  url       String
  name      String?
  handle    String  @unique
  avatarUrl String?
  posts     Post[]  @relation("author")
  reposts   Post[]  @relation("reposter")
}

model Verification {
  id        String   @id @db.Uuid
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model MutePhrase {
  id     String  @id @db.Uuid()
  phrase String
  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.Uuid()
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, phrase])
}

enum PostType {
  bluesky
  mastodon
}
