services:
  traefik:
    image: traefik:v3.2.0
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL:-tyler@sill.social}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - net
    restart: always

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - net
    restart: always    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"

  db:
    image: postgres:alpine
    container_name: postgres_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      - net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"

  remix:
    image: ghcr.io/tylerfisher/sill/remix:latest
    env_file:
      - .env
    networks:
      - net
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${WEB_DOMAIN:-localhost}`)"
      - "traefik.http.routers.web.tls=${USE_SSL:-false}"
      - "traefik.http.routers.web.tls.certresolver=myresolver"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"

  # dozzle:
  #   image: amir20/dozzle:latest
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./dozzle/data:/data
  #   networks:
  #     - net
  #   environment:
  #     DOZZLE_NO_ANALYTICS: true
  #     DOZZLE_AUTH_PROVIDER: simple
  #   restart: always
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.dozzle.rule=Host(`${DOZZLE_DOMAIN:-dozzle.localhost}`)"
  #     - "traefik.http.routers.dozzle.tls=${USE_SSL:-false}"
  #     - "traefik.http.routers.dozzle.tls.certresolver=myresolver"
  #     - "traefik.http.services.dozzle.loadbalancer.server.port=8080"
  #   healthcheck:
  #     test: ["CMD", "/dozzle", "healthcheck"]
  #     interval: 3s
  #     timeout: 30s
  #     retries: 5
  #     start_period: 30s

volumes:
  postgres_data:
  redis_data:

networks:
  net:
    driver: bridge