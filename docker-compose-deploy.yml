services:
  traefik:
    image: traefik:v3.2.0
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL:-tyler@sill.social}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - net
    restart: always
    labels:
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DASHBOARD_DOMAIN:-traefik.sill.social}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}"

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - net
    restart: always    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"

  db:
    image: postgres:alpine
    container_name: postgres_db
    shm_size: 1gb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      - net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
      resources:
        limits:
          cpus: 10

  bull-monitor:
    container_name: bull-monitor
    image: tiagoboeing/bull-board:latest
    restart: always
    ports:
      - 4000:4000
    env_file:
      - .env
    environment:
      QUEUE_PREFIX: ${BULL_QUEUE_PREFIX}
      QUEUE_NAMES: |
        account-update
        mastodon
        bluesky
        links
      REDIS_HOST: redis
      AUTH_REQUIRE: true
      AUTH_LOGIN: ${BULL_MONITOR_AUTH_LOGIN}
      AUTH_PASSWORD: ${BULL_MONITOR_AUTH_PASSWORD}
    networks:
      - net
    depends_on:
      - redis
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bull.rule=Host(`${BULL_MONITOR_DOMAIN:-bull.localhost}`)"
      - "traefik.http.routers.bull.tls=${USE_SSL:-false}"
      - "traefik.http.routers.bull.tls.certresolver=myresolver"
      - "traefik.http.services.bull.loadbalancer.server.port=4000"

  pgbouncer:
    container_name: pgbouncer
    image: edoburu/pgbouncer:latest
    environment:
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_NAME=${POSTGRES_DB:-postgres}
      - AUTH_TYPE=scram-sha-256
      - POOL_MODE=transaction
      - ADMIN_USERS=${POSTGRES_USER:-postgres}
    ports:
      - "5432:5432"
    depends_on:
      - db
    healthcheck:
      test: ['CMD', 'pg_isready', '-h', 'localhost']

  remix:
    image: ghcr.io/tylerfisher/sill/remix:latest
    env_file:
      - .env
    environment:
      - NODE_ENV=production
    depends_on:
      - pgbouncer
      - redis
      - traefik
      - dozzle
      - bull-monitor
    networks:
      - net
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${WEB_DOMAIN:-localhost}`)"
      - "traefik.http.routers.web.tls=${USE_SSL:-false}"
      - "traefik.http.routers.web.tls.certresolver=myresolver"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"

  dozzle:
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dozzle/data:/data
    networks:
      - net
    environment:
      DOZZLE_NO_ANALYTICS: true
      DOZZLE_AUTH_PROVIDER: simple
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle.rule=Host(`${DOZZLE_DOMAIN:-dozzle.localhost}`)"
      - "traefik.http.routers.dozzle.tls=${USE_SSL:-false}"
      - "traefik.http.routers.dozzle.tls.certresolver=myresolver"
      - "traefik.http.services.dozzle.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "/dozzle", "healthcheck"]
      interval: 3s
      timeout: 30s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
  redis_data:

networks:
  net:
    driver: bridge