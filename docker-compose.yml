services:
  traefik:
    image: traefik:v3.1.2
    command:
      - "--api.insecure=true"  # Enable dashboard for local dev
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.remix.address=:3000"
    ports:
      - "3000:3000"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - net
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"

  db:
    image: postgres:latest
    volumes:
      - postgres_db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      - net
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
  
  bull-monitor:
    container_name: bull-monitor
    image: tiagoboeing/bull-board:latest
    restart: always
    ports:
      - 4000:4000
    env_file:
      - .env
    environment:
      QUEUE_PREFIX: ${BULL_QUEUE_PREFIX}
      QUEUE_NAMES: |
        account-update
        mastodon
        bluesky
        links
      REDIS_HOST: redis
      AUTH_REQUIRE: true
      AUTH_LOGIN: ${BULL_MONITOR_AUTH_LOGIN}
      AUTH_PASSWORD: ${BULL_MONITOR_AUTH_PASSWORD}
    networks:
      - net
    depends_on:
      - redis
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
  
  pgbouncer:
    container_name: pgbouncer
    image: edoburu/pgbouncer:latest
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_NAME=sill
      - AUTH_TYPE=scram-sha-256
      - POOL_MODE=transaction
      - ADMIN_USERS=postgres
    ports:
      - "5432:5432"
    depends_on:
      - db
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
    healthcheck:
      test: ['CMD', 'pg_isready', '-h', 'localhost']

  remix:
    build:
      context: ./
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - NODE_ENV=development
    depends_on:
      - db
      - redis
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${WEB_DOMAIN}`) || Host(`127.0.0.1`)"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
    command: ["npm", "run", "dev"]
    volumes:
      - ${APP_DIR}:/app
      - /app/node_modules

  dozzle:
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - /path/to/dozzle/data:/data
      - ./dozzle/data:/data
    networks:
      - net
    environment:
      DOZZLE_NO_ANALYTICS: true
      DOZZLE_AUTH_PROVIDER: simple
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle.rule=Host(`${DOZZLE_DOMAIN}`)"
      - "traefik.http.services.dozzle.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "/dozzle", "healthcheck"]
      interval: 3s
      timeout: 30s
      retries: 5
      start_period: 30s

volumes:
  postgres_db:
  redis_data:

networks:
  net:
    driver: bridge